
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import { X } from "lucide-react";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/jobs/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/jobs/ui/form";
import { Input } from "@/components/jobs/ui/input";
import { Button } from "@/components/jobs/ui/button";
import { Textarea } from "@/components/jobs/ui/textarea";
import { createCandidate } from "@/services/candidateService";

// Form validation schema
const candidateFormSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  experience: z.string().min(1, "Experience is required"),
  email: z.string().email("Invalid email format").optional().or(z.literal("")),
  phone: z.string().optional().or(z.literal("")),
  skills: z.string().optional(),
});

type CandidateFormValues = z.infer<typeof candidateFormSchema>;

interface AddCandidateModalProps {
  jobId: string;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onCandidateAdded: () => void;
}

const AddCandidateModal = ({
  jobId,
  open,
  onOpenChange,
  onCandidateAdded,
}: AddCandidateModalProps) => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<CandidateFormValues>({
    resolver: zodResolver(candidateFormSchema),
    defaultValues: {
      name: "",
      experience: "",
      email: "",
      phone: "",
      skills: "",
    },
  });

  const onSubmit = async (values: CandidateFormValues) => {
    try {
      setIsSubmitting(true);
      
      const skills = values.skills 
        ? values.skills.split(",").map(skill => skill.trim()).filter(Boolean)
        : [];
      
      await createCandidate(jobId, {
        id: "", // Will be generated by the server
        name: values.name,
        status: "Screening",
        experience: values.experience,
        matchScore: 70, // Default match score
        appliedDate: new Date().toISOString().split("T")[0],
        skills: skills,
        email: values.email,
        phone: values.phone,
      });
      
      toast.success("Candidate added successfully");
      form.reset();
      onOpenChange(false);
      onCandidateAdded();
    } catch (error) {
      console.error("Error adding candidate:", error);
      toast.error("Failed to add candidate");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Add New Candidate</DialogTitle>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Full Name</FormLabel>
                  <FormControl>
                    <Input placeholder="John Doe" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="experience"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Experience</FormLabel>
                  <FormControl>
                    <Input placeholder="3 years" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input placeholder="john@example.com" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Phone</FormLabel>
                  <FormControl>
                    <Input placeholder="+91 9876543210" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="skills"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Skills (comma-separated)</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="React, TypeScript, Node.js" 
                      className="resize-none" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => onOpenChange(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? "Adding..." : "Add Candidate"}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

export default AddCandidateModal;
